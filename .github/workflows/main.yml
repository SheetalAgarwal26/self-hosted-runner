name: CI/CD on Self-Hosted Runner

on:
  push:
    branches:
    - main

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: sheetal-github-runner

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Git commit SHA
      id: commit
      uses: prompt/actions-commit-hash@v2

    - name: Build, tag and push docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Run Docker Containerized application on EC2 Server
      uses: fifsky/ssh-action@master
      env:
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      with:
        host: <PRIVATE_IP_OF_WEBSERVER>
        user: <USERNAME_OF_WEBSERVER> #ubuntu
        key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
        command: |
          docker image prune -f
          docker system prune -f
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker run -d -p 80:80 --name <DOCKER_CONTAINER_NAME> ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
